{"remainingRequest":"/Users/den/Desktop/projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/den/Desktop/projects/test/resources/frontend/components/TaskCreate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/den/Desktop/projects/test/resources/frontend/components/TaskCreate.vue","mtime":1605179785750},{"path":"/Users/den/Desktop/projects/test/node_modules/cache-loader/dist/cjs.js","mtime":1592927704205},{"path":"/Users/den/Desktop/projects/test/node_modules/thread-loader/dist/cjs.js","mtime":1592927704070},{"path":"/Users/den/Desktop/projects/test/node_modules/babel-loader/lib/index.js","mtime":1605083852619},{"path":"/Users/den/Desktop/projects/test/node_modules/cache-loader/dist/cjs.js","mtime":1592927704205},{"path":"/Users/den/Desktop/projects/test/node_modules/vue-loader/lib/index.js","mtime":1605083853653}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUYXNrUmVxdWVzdGVyIGZyb20gJ0AvYXBpL1Rhc2tSZXF1ZXN0ZXInCmltcG9ydCB7Z2V0VmFsaWRhdGlvbkVycm9yc30gZnJvbSAnQC9hcGknCmltcG9ydCBFdmVudEJ1cyBmcm9tICcuLi9ldmVudEJ1cycKCmV4cG9ydCBkZWZhdWx0IHsKICAgIGRhdGE6ICgpID0+ICh7CiAgICAgICAgZm9ybTogewogICAgICAgICAgICB1c2VyTmFtZTogbnVsbCwKICAgICAgICAgICAgdXNlckVtYWlsOiBudWxsLAogICAgICAgICAgICBib2R5OiBudWxsLAogICAgICAgIH0sCiAgICAgICAgZXJyb3JzOiB7fSwKICAgIH0pLAogICAgbWV0aG9kczogewogICAgICAgIGFzeW5jIHN0b3JlKCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgYXdhaXQgVGFza1JlcXVlc3Rlci5zdG9yZSh0aGlzLmZvcm0pCiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCd0YXNrOm5ldy10YXNrJykKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0ge30KICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHt9CiAgICAgICAgICAgICAgICAvLyDQstGL0LLQtdGB0YLQuCDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZ2V0VmFsaWRhdGlvbkVycm9ycyhlKQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgIH0sCn0K"},{"version":3,"sources":["TaskCreate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaskCreate.vue","sourceRoot":"resources/frontend/components","sourcesContent":["<template>\n    <v-row>\n        <v-card dark class=\"full-width px-10 py-3 d-flex\">\n            <v-col cols=\"3\">\n                <v-text-field v-model=\"form.userName\"\n                              :error-messages=\"errors.userName\"\n                              label=\"Имя\"\n                              dense\n                              filled/>\n            </v-col>\n\n            <v-col cols=\"3\">\n                <v-text-field v-model=\"form.userEmail\"\n                              :error-messages=\"errors.userEmail\"\n                              label=\"Почта\"\n                              dense\n                              filled/>\n            </v-col>\n\n            <v-col cols=\"4\">\n                <v-text-field v-model=\"form.body\"\n                              :error-messages=\"errors.body\"\n                              label=\"Задача\"\n                              dense\n                              filled/>\n            </v-col>\n\n            <v-col cols=\"2\">\n                <v-btn class=\"mt-1\"\n                       large\n                       light\n                       block\n                       @click.prevent=\"store\">\n                    Создать\n                </v-btn>\n            </v-col>\n        </v-card>\n    </v-row>\n</template>\n\n<script>\n    import TaskRequester from '@/api/TaskRequester'\n    import {getValidationErrors} from '@/api'\n    import EventBus from '../eventBus'\n\n    export default {\n        data: () => ({\n            form: {\n                userName: null,\n                userEmail: null,\n                body: null,\n            },\n            errors: {},\n        }),\n        methods: {\n            async store() {\n                try {\n                    await TaskRequester.store(this.form)\n                    this.$emit('task:new-task')\n                    this.errors = {}\n                    this.form = {}\n                    // вывести уведомление\n                } catch (e) {\n                    this.errors = getValidationErrors(e)\n                }\n            },\n        },\n    }\n</script>\n"]}]}